=====================================================================

001 Memory leak with SoSelection.

    To reproduce, use a recent version of Coin from CVS, set the
    envvar COIN_DEBUG_TRACK_SOBASE_INSTANCES=1, then run the following
    example. Click on the "A" to select it, then while it is still
    selected, quit the application. The debug dump at the end shows
    that there is most likely an SoPath that has not been freed,
    causing all the nodes in the path to also stick around after exit.

----8<----- [snip] --------------------8<----- [snip] ----------------
#include <Inventor/Qt/SoQt.h>
#include <Inventor/Qt/viewers/SoQtExaminerViewer.h>
#include <Inventor/nodes/SoNode.h>
#include <Inventor/nodes/SoSelection.h>
#include <Inventor/actions/SoBoxHighlightRenderAction.h>
#include <Inventor/SoPickedPoint.h>

// *************************************************************************

static SoPath *
myPickFilterCB(void* userData, const SoPickedPoint* pick)
{
  return pick->getPath();
}


// *************************************************************************

static const char ivfile[] = "#Inventor V2.1 ascii\n\n"
"DEF SELECTION Selection {\n"
"   PickStyle { style BOUNDING_BOX }\n"
"   Text3 { string \"A\" }\n"
"}";

// *************************************************************************

int
main(int argc, char ** argv)
{
  QWidget * window = SoQt::init(argv[0]);

  SoInput * in = new SoInput;
  in->setBuffer((void *)ivfile, strlen(ivfile));

  SoNode * root = SoDB::readAll(in);
  assert(root);
  root->ref();

  SoQtExaminerViewer * viewer = new SoQtExaminerViewer(window);

  SoBoxHighlightRenderAction * a = new SoBoxHighlightRenderAction;
  viewer->setGLRenderAction(a);
  SoSelection * s = (SoSelection *)SoNode::getByName("SELECTION");
  assert(s);
  viewer->redrawOnSelectionChange(s);

  s->setPickFilterCallback(myPickFilterCB);

  viewer->setSceneGraph(root);
  viewer->show();
  viewer->setFeedbackVisibility(TRUE);
  SoQt::show(window);

  SoQt::mainLoop();

  delete viewer;
  delete a;
  root->unref();

  SoDB::cleanup();

  return 0;
}

----8<----- [snip] --------------------8<----- [snip] ----------------

    20041018 mortene.

=====================================================================

002 Memory leak(s) with sony_cam.wrl model.

    To reproduce, use a recent version of Coin from CVS, set the
    envvar COIN_DEBUG_TRACK_SOBASE_INSTANCES=1, then load the
    sony_cam.wrl (pederb has it stored on his $HOME) into e.g. an
    examinerviewer, and then exit.

    The model contains VRML protos, sensors and interpolators, and one
    or more of these seems a likely offender, as they are heavily
    featured in the debug dump of not-properly-unref'ed nodes/engines.

    20041019 mortene.

=====================================================================

005 Possible memory corruption in cc_rbptree_init()

    This code looks suspicious:

    void 
    cc_rbptree_init(cc_rbptree * t)
    {
      /* FIXME: use a global lock to make sure two threads doesn't
       * enter this init code at the same time. pederb, 2002-06-06
       */ 
      static int first = 1;
      if (first) {
        first = 0;
        rbptree_sentinel.left = NULL;
        rbptree_sentinel.right = NULL;
        rbptree_sentinel.parent = NULL;
        rbptree_sentinel.pointer = NULL;
        rbptree_sentinel.color = RBPTREE_BLACK;
      }
      t->root = &rbptree_sentinel;
      t->counter = 0;
    }

    20060206 kintel.

=====================================================================

006 SoIntersectionDetectionActionP::staticepsilon not reset on init/cleanup

    20060206 kintel.

=====================================================================

007 Memory leak in SoDragger::setCameraInfo(SoAction * action)

    if (THIS->draggercache && THIS->draggercache->path) {
      static sodragger_vv_data * vvdata;
      if (vvdata == NULL) {
        vvdata = new sodragger_vv_data;
      }
      [...]

    20060206 kintel.

=====================================================================

008 SoTransformerDraggerP::colinearThreshold not reset on init/cleanup

    20060206 kintel.

=====================================================================

009 cc_debugerror: Static values not reset on init/cleanup

    static cc_debugerror_cb * dbgerr_callback = (cc_debugerror_cb *)cc_error_default_handler_cb;
    static void * dbgerr_callback_data = NULL;

    20060206 kintel.

=====================================================================

009 cc_error: Static values not reset on init/cleanup

    static cc_error_cb * cc_error_callback = cc_error_default_handler_cb;
    static void * cc_error_callback_data = NULL;

    20060206 kintel.

=====================================================================

011 Possible resource leak in cc_error_default_handler_cb() 

    The FILE * returned from coin_get_stderr() shouldn't be cached
    as it might be invalid or leak memory the next time we want to use
    it:

    static FILE * coin_stderr = NULL;
    if (!coin_stderr) { coin_stderr = coin_get_stderr(); }

    20060206 kintel.

=====================================================================

011 Possible crash in SoDebugError:

    It looks like debug_break_cleanup() deletes all breakpoints for
    every cleanup, but only initializes them once. Since
    num_breakpoints is not reset, memory might be freed multiple times.
    The initClass() code should probably be changed to init every time
    and the cleanup code should reset num_breakpoints to -1 or 0.

    20060206 kintel.

=====================================================================

012 Memory leak in SoForeignFileKit

    SoForeignFileKit::fileexts leaks.

    20060206 kintel.

=====================================================================

013 Memory leak in cc_get_full_path()

    The following resources leak/are not reset on cleanup:

    static const char * list = 0;
    static const char * path[MAX_NR_PATH_ENTRIES] = { 0 };
    static int end_reached = 0;

    20060206 kintel.

=====================================================================

014 cc_flww32_initialize(): Uninitialized variable used

    cc_flww32_globals.devctx is used before being initialized:

    (void)EnumFontFamiliesEx(cc_flww32_globals.devctx,
                             (LPLOGFONT)&logfont,
                             (FONTENUMPROC)font_enum_proc,
                             0, /* user data for callback */
                             0); /* reserved, must be zero */

    20060206 kintel.

=====================================================================

016 SoHardCopy: Static variable in function not reset on cleanup

    SoHardCopy::init(void)
    {
      static SbBool first = TRUE;
      if (!first) { return; }
      first = FALSE;
    
      SoVectorizeAction::initClass();
      SoVectorizePSAction::initClass();
      SoVectorizeCGMAction::initClass();
      SoVectorizeHPGLAction::initClass();
      SoVectorizeGDIAction::initClass();
    }

    20060206 kintel.

=====================================================================

017 SoGLBigImage: static variable CHANGELIMIT not reset on cleanup

    static int CHANGELIMIT = 4;

    20060206 kintel.

=====================================================================

018 SoJavaScriptEngine resource corruption

    The following static variable defined within the constructor
    might not contain valid values on the second SoDB::init().

    static JSClass jclass = {
      "SoJavaScriptEngine_global", 0,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_EnumerateStub,
      spidermonkey()->JS_ResolveStub,
      spidermonkey()->JS_ConvertStub, 
      spidermonkey()->JS_FinalizeStub,
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0
    };


    20060206 kintel.

=====================================================================

019 SoOffscreenGLXData: Static variable in function not reset on cleanup

    SoOffscreenGLXData::getDisplay(void)
    {
      static SbBool first = TRUE;
      if (first) {
        first = FALSE;
        [...]

    20060206 kintel.

=====================================================================
