=====================================================================

001 Memory leak with SoSelection.

    To reproduce, use a recent version of Coin from CVS, set the
    envvar COIN_DEBUG_TRACK_SOBASE_INSTANCES=1, then run the following
    example. Click on the "A" to select it, then while it is still
    selected, quit the application. The debug dump at the end shows
    that there is most likely an SoPath that has not been freed,
    causing all the nodes in the path to also stick around after exit.

----8<----- [snip] --------------------8<----- [snip] ----------------
#include <Inventor/Qt/SoQt.h>
#include <Inventor/Qt/viewers/SoQtExaminerViewer.h>
#include <Inventor/nodes/SoNode.h>
#include <Inventor/nodes/SoSelection.h>
#include <Inventor/actions/SoBoxHighlightRenderAction.h>
#include <Inventor/SoPickedPoint.h>

// *************************************************************************

static SoPath *
myPickFilterCB(void* userData, const SoPickedPoint* pick)
{
  return pick->getPath();
}


// *************************************************************************

static const char ivfile[] = "#Inventor V2.1 ascii\n\n"
"DEF SELECTION Selection {\n"
"   PickStyle { style BOUNDING_BOX }\n"
"   Text3 { string \"A\" }\n"
"}";

// *************************************************************************

int
main(int argc, char ** argv)
{
  QWidget * window = SoQt::init(argv[0]);

  SoInput * in = new SoInput;
  in->setBuffer((void *)ivfile, strlen(ivfile));

  SoNode * root = SoDB::readAll(in);
  assert(root);
  root->ref();

  SoQtExaminerViewer * viewer = new SoQtExaminerViewer(window);

  SoBoxHighlightRenderAction * a = new SoBoxHighlightRenderAction;
  viewer->setGLRenderAction(a);
  SoSelection * s = (SoSelection *)SoNode::getByName("SELECTION");
  assert(s);
  viewer->redrawOnSelectionChange(s);

  s->setPickFilterCallback(myPickFilterCB);

  viewer->setSceneGraph(root);
  viewer->show();
  viewer->setFeedbackVisibility(TRUE);
  SoQt::show(window);

  SoQt::mainLoop();

  delete viewer;
  delete a;
  root->unref();

  SoDB::cleanup();

  return 0;
}

----8<----- [snip] --------------------8<----- [snip] ----------------

    20041018 mortene.

=====================================================================

002 Memory leak(s) with sony_cam.wrl model.

    To reproduce, use a recent version of Coin from CVS, set the
    envvar COIN_DEBUG_TRACK_SOBASE_INSTANCES=1, then load the
    sony_cam.wrl (pederb has it stored on his $HOME) into e.g. an
    examinerviewer, and then exit.

    The model contains VRML protos, sensors and interpolators, and one
    or more of these seems a likely offender, as they are heavily
    featured in the debug dump of not-properly-unref'ed nodes/engines.

    20041019 mortene.

=====================================================================

011 Possible resource leak in cc_error_default_handler_cb() 

    The FILE * returned from coin_get_stderr() shouldn't be cached
    as it might be invalid or leak memory the next time we want to use
    it:

    static FILE * coin_stderr = NULL;
    if (!coin_stderr) { coin_stderr = coin_get_stderr(); }

    20060206 kintel.

=====================================================================

018 SoJavaScriptEngine resource corruption

    The following static variable defined within the constructor
    might not contain valid values on the second SoDB::init().

    static JSClass jclass = {
      "SoJavaScriptEngine_global", 0,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_EnumerateStub,
      spidermonkey()->JS_ResolveStub,
      spidermonkey()->JS_ConvertStub, 
      spidermonkey()->JS_FinalizeStub,
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0
    };


    20060206 kintel.

=====================================================================

021 SoWWWAnchor: Static variables not reset on cleanup

    SoWWWAnchorCB * SoWWWAnchorP::fetchfunc = NULL;
    void * SoWWWAnchorP::fetchdata = NULL;
    SoWWWAnchorCB * SoWWWAnchorP::highlightfunc = NULL;
    void * SoWWWAnchorP::highlightdata = NULL;

    20060207 kintel.

=====================================================================

022 SoNodeKitListPart: Static variable in function not reset on cleanup

    const SoTypeList &
    SoNodeKitListPart::getChildTypes(void) const
    {
      if (this->allowedtypes.getLength()) return this->allowedtypes;
    
      // Dynamically allocated to avoid problems on systems which doesn't
      // handle static constructors.
      static SoTypeList * deflist = new SoTypeList; // FIXME: should deallocate on exit. 20000406 mortene.
      [...]
    
    20060207 kintel.

=====================================================================
