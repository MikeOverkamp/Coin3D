=====================================================================

001 Memory leak with SoSelection.

    To reproduce, use a recent version of Coin from CVS, set the
    envvar COIN_DEBUG_TRACK_SOBASE_INSTANCES=1, then run the following
    example. Click on the "A" to select it, then while it is still
    selected, quit the application. The debug dump at the end shows
    that there is most likely an SoPath that has not been freed,
    causing all the nodes in the path to also stick around after exit.

----8<----- [snip] --------------------8<----- [snip] ----------------
#include <Inventor/Qt/SoQt.h>
#include <Inventor/Qt/viewers/SoQtExaminerViewer.h>
#include <Inventor/nodes/SoNode.h>
#include <Inventor/nodes/SoSelection.h>
#include <Inventor/actions/SoBoxHighlightRenderAction.h>
#include <Inventor/SoPickedPoint.h>

// *************************************************************************

static SoPath *
myPickFilterCB(void* userData, const SoPickedPoint* pick)
{
  return pick->getPath();
}


// *************************************************************************

static const char ivfile[] = "#Inventor V2.1 ascii\n\n"
"DEF SELECTION Selection {\n"
"   PickStyle { style BOUNDING_BOX }\n"
"   Text3 { string \"A\" }\n"
"}";

// *************************************************************************

int
main(int argc, char ** argv)
{
  QWidget * window = SoQt::init(argv[0]);

  SoInput * in = new SoInput;
  in->setBuffer((void *)ivfile, strlen(ivfile));

  SoNode * root = SoDB::readAll(in);
  assert(root);
  root->ref();

  SoQtExaminerViewer * viewer = new SoQtExaminerViewer(window);

  SoBoxHighlightRenderAction * a = new SoBoxHighlightRenderAction;
  viewer->setGLRenderAction(a);
  SoSelection * s = (SoSelection *)SoNode::getByName("SELECTION");
  assert(s);
  viewer->redrawOnSelectionChange(s);

  s->setPickFilterCallback(myPickFilterCB);

  viewer->setSceneGraph(root);
  viewer->show();
  viewer->setFeedbackVisibility(TRUE);
  SoQt::show(window);

  SoQt::mainLoop();

  delete viewer;
  delete a;
  root->unref();

  SoDB::cleanup();

  return 0;
}

----8<----- [snip] --------------------8<----- [snip] ----------------

    20041018 mortene.

=====================================================================

002 Memory leak(s) with sony_cam.wrl model.

    To reproduce, use a recent version of Coin from CVS, set the
    envvar COIN_DEBUG_TRACK_SOBASE_INSTANCES=1, then load the
    sony_cam.wrl (pederb has it stored on his $HOME) into e.g. an
    examinerviewer, and then exit.

    The model contains VRML protos, sensors and interpolators, and one
    or more of these seems a likely offender, as they are heavily
    featured in the debug dump of not-properly-unref'ed nodes/engines.

    20041019 mortene.

=====================================================================

005 Possible memory corruption in cc_rbptree_init()

    This code looks suspicious:

    void 
    cc_rbptree_init(cc_rbptree * t)
    {
      /* FIXME: use a global lock to make sure two threads doesn't
       * enter this init code at the same time. pederb, 2002-06-06
       */ 
      static int first = 1;
      if (first) {
        first = 0;
        rbptree_sentinel.left = NULL;
        rbptree_sentinel.right = NULL;
        rbptree_sentinel.parent = NULL;
        rbptree_sentinel.pointer = NULL;
        rbptree_sentinel.color = RBPTREE_BLACK;
      }
      t->root = &rbptree_sentinel;
      t->counter = 0;
    }

    20060206 kintel.

=====================================================================

007 Memory leak in SoDragger::setCameraInfo(SoAction * action)

    if (THIS->draggercache && THIS->draggercache->path) {
      static sodragger_vv_data * vvdata;
      if (vvdata == NULL) {
        vvdata = new sodragger_vv_data;
      }
      [...]

    20060206 kintel.

=====================================================================

009 cc_debugerror: Static values not reset on init/cleanup

    static cc_debugerror_cb * dbgerr_callback = (cc_debugerror_cb *)cc_error_default_handler_cb;
    static void * dbgerr_callback_data = NULL;

    20060206 kintel.

=====================================================================

009 cc_error: Static values not reset on init/cleanup

    static cc_error_cb * cc_error_callback = cc_error_default_handler_cb;
    static void * cc_error_callback_data = NULL;

    20060206 kintel.

=====================================================================

011 Possible resource leak in cc_error_default_handler_cb() 

    The FILE * returned from coin_get_stderr() shouldn't be cached
    as it might be invalid or leak memory the next time we want to use
    it:

    static FILE * coin_stderr = NULL;
    if (!coin_stderr) { coin_stderr = coin_get_stderr(); }

    20060206 kintel.

=====================================================================

012 Memory leak in SoForeignFileKit

    SoForeignFileKit::fileexts leaks.

    20060206 kintel.

=====================================================================

014 cc_flww32_initialize(): Uninitialized variable used

    cc_flww32_globals.devctx is used before being initialized:

    (void)EnumFontFamiliesEx(cc_flww32_globals.devctx,
                             (LPLOGFONT)&logfont,
                             (FONTENUMPROC)font_enum_proc,
                             0, /* user data for callback */
                             0); /* reserved, must be zero */

    20060206 kintel.

=====================================================================

016 SoHardCopy: Static variable in function not reset on cleanup

    SoHardCopy::init(void)
    {
      static SbBool first = TRUE;
      if (!first) { return; }
      first = FALSE;
    
      SoVectorizeAction::initClass();
      SoVectorizePSAction::initClass();
      SoVectorizeCGMAction::initClass();
      SoVectorizeHPGLAction::initClass();
      SoVectorizeGDIAction::initClass();
    }

    20060206 kintel.

=====================================================================

017 SoGLBigImage: static variable CHANGELIMIT not reset on cleanup

    static int CHANGELIMIT = 4;

    20060206 kintel.

=====================================================================

018 SoJavaScriptEngine resource corruption

    The following static variable defined within the constructor
    might not contain valid values on the second SoDB::init().

    static JSClass jclass = {
      "SoJavaScriptEngine_global", 0,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_PropertyStub,
      spidermonkey()->JS_EnumerateStub,
      spidermonkey()->JS_ResolveStub,
      spidermonkey()->JS_ConvertStub, 
      spidermonkey()->JS_FinalizeStub,
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0
    };


    20060206 kintel.

=====================================================================

020 SoUpgrader: Static variable in function not reset on cleanup

    static void 
    soupgrader_init_classes(void)
    {
      static int first = 1;
      if (first) {
        first = 0;
        [...]

    20060207 kintel.

=====================================================================

021 SoWWWAnchor: Static variables not reset on cleanup

    SoWWWAnchorCB * SoWWWAnchorP::fetchfunc = NULL;
    void * SoWWWAnchorP::fetchdata = NULL;
    SoWWWAnchorCB * SoWWWAnchorP::highlightfunc = NULL;
    void * SoWWWAnchorP::highlightdata = NULL;

    20060207 kintel.

=====================================================================

022 SoNodeKitListPart: Static variable in function not reset on cleanup

    const SoTypeList &
    SoNodeKitListPart::getChildTypes(void) const
    {
      if (this->allowedtypes.getLength()) return this->allowedtypes;
    
      // Dynamically allocated to avoid problems on systems which doesn't
      // handle static constructors.
      static SoTypeList * deflist = new SoTypeList; // FIXME: should deallocate on exit. 20000406 mortene.
      [...]
    
    20060207 kintel.

=====================================================================

023 SoSceneManager: Static variables not reset on cleanup

    SbBool SoSceneManagerP::touchtimer = TRUE;

    20060207 kintel.

=====================================================================

024 SoVRMLScript: Static variables not reset on cleanup

    static SoVRMLScriptEvaluateCB * sovrmlscript_eval_cb = NULL;
    static void * sovrmlscript_eval_closure = NULL;

    20060207 kintel.

=====================================================================

027 SoSubNodeEngine.h: Memory leak from static variable

    static SoEngineOutputData * outputdata;

    20060207 kintel.

=====================================================================

028 SoLockManager: Memory leak from static variable

    static class SoLockManager_pimpl * pimpl;

    20060207 kintel.

=====================================================================

029 SoNodeKit: Static variable not reset on cleanup

    SbBool SoNodeKit::isinitialized = FALSE;

    20060207 kintel.

=====================================================================

030 SoLocateHighlight: Possible memory leak from static variable

    SoFullPath * SoLocateHighlight::currenthighlight = NULL;

    20060207 kintel.

=====================================================================

031 SoSubNode.h: Possible memory leak from static variable

    The following comments at SoSubNode.h:147 suggest there is
    a memory leak but the code looks OK.
    Write a test app with an extension node to verify.

      /* FIXME: this is a "static" memory leak. 20030131 mortene. */ \
      /* Internal Coin nodes are handled properly though. pederb, 20041122 */ \
      _class_::fieldData = \
        new SoFieldData(_class_::parentFieldData ? \
                        *_class_::parentFieldData : NULL); \

    20060207 kintel.

=====================================================================

032 SoInteraction: Static variable not reset on cleanup

    SbBool SoInteraction::isinitialized = FALSE;

    20060207 kintel.

=====================================================================

033 SoSubKit.h: Memory leak from static variable

    This static variable leaks:
      static SoNodekitCatalog * classcatalog;

    ..and this is not reset on cleanup:
      static const SoNodekitCatalog ** parentcatalogptr

    20060207 kintel.

=====================================================================

034 SoVRMLShape: Static variable not reset on cleanup

    int SoVRMLShape::numrendercaches;

    20060207 kintel.

=====================================================================

035 Crash at exit if COIN_DEBUG_CLEANUP=1

    Calling SoDB::finish() results in a crash if COIN_DEBUG_CLEANUP is
    set:

    ../../../src/Coin/src/tidbits.c:1235: failed assertion
    `!isexiting && "tried to attach an atexit function while exiting"'

#0  0x9004716c in kill ()
#1  0x90128b98 in abort ()
#2  0x946ec144 in __eprintf ()
#3  0x3f003c94 in coin_atexit_func (name=0xd3490 "cc_error_mutex_cleanup", f=0xd0318 <cc_error_mutex_cleanup>, priority=0) at ../../../src/Coin/src/tidbits.c:1235
#4  0x000d0644 in cc_error_handle (me=0xbfffe7a8) at ../../../../src/Coin/src/errors/error.c:127
#5  0x000d0b78 in cc_debugerror_internal_post (source=0x3f006b44 "coin_atexit_cleanup", msg=0xbfffe888, sev=CC_DEBUGERROR_INFO, type=0xd34d0 "info") at ../../../../src/Coin/src/errors/debugerror.c:100
#6  0x000d0d34 in cc_debugerror_postinfo (source=0x3f006b44 "coin_atexit_cleanup", format=0x3f006b58 "invoking %s()") at ../../../../src/Coin/src/errors/debugerror.c:136
#7  0x3f003b28 in coin_atexit_cleanup () at ../../../src/Coin/src/tidbits.c:1173
#8  0x02286668 in SoDB::finish () at ../../../../src/Coin/src/misc/SoDB.cpp:842
#9  0x000039c0 in main ()

    20060208 kyrah

