/**************************************************************************\
 *
 *  This file is part of the Coin 3D visualization library.
 *  Copyright (C) 1998-2001 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 2 as
 *  published by the Free Software Foundation.  See the file LICENSE.GPL
 *  at the root directory of this source distribution for more details.
 *
 *  If you desire to use Coin with software that is incompatible
 *  licensewise with the GPL, and / or you would like to take
 *  advantage of the additional benefits with regard to our support
 *  services, please contact Systems in Motion about acquiring a Coin
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  www.sim.no, support@sim.no, Voice: +47 22114160, Fax: +47 22207097
 *
\**************************************************************************/

/* this file should only be included from thread.c */

static int
internal_init(cc_thread * thread)
{
  int status = pthread_attr_init(&(thread->pthread.threadattrs));
  if (status != 0) {
    if (COIN_DEBUG)
      cc_fprintf(stderr, "pthread_attr_init() error: %d\n", status);
    return CC_ERROR;
  }

  status = pthread_create(&(thread->pthread.threadid),
                          &(thread->pthread.threadattrs),
                          thread->func, thread->closure);
  if (status != 0) {
    if (COIN_DEBUG)
      cc_fprintf(stderr, "pthread_create() error: %d\n", status);
    return CC_ERROR;
  }
  return CC_OK;
}

static int
internal_clean(cc_thread * thread)
{
  int status = pthread_attr_destroy(&(thread->pthread.threadattrs));
  if (status != 0) {
    if (COIN_DEBUG)
      cc_fprintf(stderr, "pthread_attr_destroy() error: %d\n", status);
    return CC_ERROR;
  }
  return CC_OK;
}

static int
internal_join(cc_thread * thread,
               void ** retvalptr)
{
  int status = pthread_join(thread->pthread.threadid, retvalptr);
  if (status != 0) {
    if (COIN_DEBUG)
      cc_fprintf(stderr, "pthread_join() error: %d\n", status);
    return CC_ERROR;
  }
  return CC_OK;
}
