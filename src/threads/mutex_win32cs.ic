/**************************************************************************\
 *
 *  This file is part of the Coin 3D visualization library.
 *  Copyright (C) 1998-2001 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 2 as
 *  published by the Free Software Foundation.  See the file LICENSE.GPL
 *  at the root directory of this source distribution for more details.
 *
 *  If you desire to use Coin with software that is incompatible
 *  licensewise with the GPL, and / or you would like to take
 *  advantage of the additional benefits with regard to our support
 *  services, please contact Systems in Motion about acquiring a Coin
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
 *  www.sim.no, support@sim.no, Voice: +47 22114160, Fax: +47 22207097
 *
\**************************************************************************/

/* this file should only be included from mutex.c */

static int
win32_cs_struct_init(cc_mutex * mutex)
{
  InitializeCriticalSection(&mutex->w32thread.critical_section);
  return CC_OK;
}

static int
win32_cs_struct_clean(cc_mutex * mutex)
{
  DeleteCriticalSection(&mutex->w32thread.critical_section);
  /* this function does not have a return value, always return OK */
  return CC_OK;
}

static int
win32_cs_lock(cc_mutex * mutex)
{
  EnterCriticalSection(&mutex->w32thread.critical_section);
  return CC_OK;
}

static int
win32_cs_try_lock(cc_mutex * mutex)
{
  BOOL status;
  status = cc_mutex_try_enter_critical_section(&mutex->w32thread.critical_section);
  return status == TRUE ? CC_OK : CC_BUSY;
}

static int
win32_cs_unlock(cc_mutex * mutex)
{
  LeaveCriticalSection(&(mutex->w32thread.critical_section));
  return CC_OK;
}
