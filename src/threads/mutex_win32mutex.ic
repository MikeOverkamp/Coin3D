/**************************************************************************\
 *
 *  This file is part of the Coin 3D visualization library.
 *  Copyright (C) 1998-2002 by Systems in Motion.  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  ("GPL") version 2 as published by the Free Software Foundation.
 *  See the file LICENSE.GPL at the root directory of this source
 *  distribution for additional information about the GNU GPL.
 *
 *  For using Coin with software that can not be combined with the GNU
 *  GPL, and for taking advantage of the additional benefits of our
 *  support services, please contact Systems in Motion about acquiring
 *  a Coin Professional Edition License.
 *
 *  See <URL:http://www.coin3d.org> for  more information.
 *
 *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY.
 *  <URL:http://www.sim.no>.
 *
\**************************************************************************/

/* this file should only be included from mutex.c */

static int
win32_mutex_struct_init(cc_mutex * mutex_struct)
{
  mutex_struct->w32thread.mutexhandle = CreateMutex(NULL, FALSE, NULL);
  if (mutex_struct->w32thread.mutexhandle == NULL) {
    if (COIN_DEBUG) {
      DWORD err;
      char *errstr;
      err = GetLastError();
      errstr = cc_internal_w32_getlasterrorstring(err);
      cc_debugerror_post("win32_mutex_struct_init",
                         "CreateMutex() error: %d, \"%s\"\n",
                         err, errstr);
      cc_internal_w32_freelasterrorstring(errstr);
    }
    return CC_ERROR;
  }
  return CC_OK;
}

static int
win32_mutex_struct_clean(cc_mutex * mutex_struct)
{
  BOOL status = CloseHandle(mutex_struct->w32thread.mutexhandle);
  if (status == FALSE) {
    if (COIN_DEBUG) {
      DWORD err;
      char *errstr;
      err = GetLastError();
      errstr = cc_internal_w32_getlasterrorstring(err);
      cc_debugerror_post("win32_mutex_struct_clean",
                         "CloseHandle() error: %d, \"%s\"\n",
                         err, errstr);
      cc_internal_w32_freelasterrorstring(errstr);
    }
    return CC_ERROR;
  }
  return CC_OK;
}

static int
win32_mutex_lock(cc_mutex * mutex)
{
  DWORD status;
  status = WaitForSingleObject(mutex->w32thread.mutexhandle, INFINITE);
  if (status == WAIT_FAILED) {
    if (COIN_DEBUG) {
      DWORD err;
      char *errstr;
      err = GetLastError();
      errstr = cc_internal_w32_getlasterrorstring(err);
      cc_debugerror_post("win32_mutex_lock",
                         "WaitSingleObject() error: %d, \"%s\"\n",
                         err, errstr);
      cc_internal_w32_freelasterrorstring(errstr);
    }
    return CC_ERROR;
  }
  return CC_OK;
}

static int
win32_mutex_try_lock(cc_mutex * mutex)
{
  DWORD status;
  status = WaitForSingleObject(mutex->w32thread.mutexhandle, 0);
  if (status == WAIT_TIMEOUT)
    return CC_BUSY;
  else if ((status == WAIT_OBJECT_0) || (status == WAIT_ABANDONED))
    return CC_OK;

  /* if we get here there was an error */
  if (COIN_DEBUG) {
    DWORD err;
    char *errstr;
    err = GetLastError();
    errstr = cc_internal_w32_getlasterrorstring(err);
    cc_debugerror_post("win32_mutex_try_lock",
                       "WaitSingleObject() error: %d, \"%s\"\n",
                       err, errstr);
    cc_internal_w32_freelasterrorstring(errstr);
  }
  return CC_ERROR;
}

static int
win32_mutex_unlock(cc_mutex * mutex)
{
  BOOL status = ReleaseMutex(mutex->w32thread.mutexhandle);
  if (status == FALSE) {
    if (COIN_DEBUG) {
      DWORD err;
      char *errstr;
      err = GetLastError();
      errstr = cc_internal_w32_getlasterrorstring(err);
      cc_debugerror_post("win32_mutex_unlock",
                         "ReleaseMutex() error: %d, \"%s\"\n",
                         err, errstr);
      cc_internal_w32_freelasterrorstring(errstr);
    }
    return CC_ERROR;
  }
  return CC_OK;
}
