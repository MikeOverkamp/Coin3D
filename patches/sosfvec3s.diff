A new SoSFVec3s field.  Useful for three-dimensional integer vectors of
relatively small size (short type).

  Lars J

Index: include/Inventor/fields/SoSFVec3s.h
===================================================================
RCS file: include/Inventor/fields/SoSFVec3s.h
diff -N include/Inventor/fields/SoSFVec3s.h
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ include/Inventor/fields/SoSFVec3s.h	28 Jan 2002 12:22:51 -0000
@@ -0,0 +1,43 @@
+#ifndef COIN_SOSFVEC3S_H
+#define COIN_SOSFVEC3S_H
+
+/**************************************************************************\
+ *
+ *  This file is part of the Coin 3D visualization library.
+ *  Copyright (C) 1998-2001 by Systems in Motion.  All rights reserved.
+ *  
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License
+ *  version 2 as published by the Free Software Foundation.  See the
+ *  file LICENSE.GPL at the root directory of this source distribution
+ *  for more details.
+ *
+ *  If you desire to use Coin with software that is incompatible
+ *  licensewise with the GPL, and / or you would like to take
+ *  advantage of the additional benefits with regard to our support
+ *  services, please contact Systems in Motion about acquiring a Coin
+ *  Professional Edition License.  See <URL:http://www.coin3d.org> for
+ *  more information.
+ *
+ *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
+ *  <URL:http://www.sim.no>, <mailto:support@sim.no>
+ *
+\**************************************************************************/
+
+#include <Inventor/fields/SoSField.h>
+#include <Inventor/fields/SoSubField.h>
+#include <Inventor/SbVec3s.h>
+
+class COIN_DLL_API SoSFVec3s : public SoSField {
+  typedef SoSField inherited;
+
+  SO_SFIELD_HEADER(SoSFVec3s, SbVec3s, const SbVec3s &);
+
+public:
+  static void initClass(void);
+
+  void setValue(const short x, const short y, const short z);
+  void setValue(const short xyz[3]);
+};
+
+#endif // !COIN_SOSFVEC3S_H
Index: src/fields/SoSFVec3s.cpp
===================================================================
RCS file: src/fields/SoSFVec3s.cpp
diff -N src/fields/SoSFVec3s.cpp
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/fields/SoSFVec3s.cpp	28 Jan 2002 12:22:51 -0000
@@ -0,0 +1,117 @@
+/**************************************************************************\
+ *
+ *  This file is part of the Coin 3D visualization library.
+ *  Copyright (C) 1998-2001 by Systems in Motion.  All rights reserved.
+ *  
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License
+ *  version 2 as published by the Free Software Foundation.  See the
+ *  file LICENSE.GPL at the root directory of this source distribution
+ *  for more details.
+ *
+ *  If you desire to use Coin with software that is incompatible
+ *  licensewise with the GPL, and / or you would like to take
+ *  advantage of the additional benefits with regard to our support
+ *  services, please contact Systems in Motion about acquiring a Coin
+ *  Professional Edition License.  See <URL:http://www.coin3d.org> for
+ *  more information.
+ *
+ *  Systems in Motion, Prof Brochs gate 6, 7030 Trondheim, NORWAY
+ *  <URL:http://www.sim.no>, <mailto:support@sim.no>
+ *
+\**************************************************************************/
+
+/*!
+  \class SoSFVec3s SoSFVec3s.h Inventor/fields/SoSFVec3s.h
+  \brief The SoSFVec3s class is a container for an SbVec3s vector.
+  \ingroup fields
+
+  This field is used where nodes, engines or other field containers
+  needs to store a single vector with three elements.
+
+  \sa SoMFVec3s
+
+*/
+
+#include <Inventor/fields/SoSFVec3s.h>
+#include <Inventor/fields/SoSubFieldP.h>
+#include <Inventor/SoInput.h>
+#include <Inventor/SoOutput.h>
+#include <Inventor/errors/SoReadError.h>
+#if COIN_DEBUG
+#include <Inventor/errors/SoDebugError.h>
+#endif // COIN_DEBUG
+
+
+SO_SFIELD_SOURCE(SoSFVec3s, SbVec3s, const SbVec3s &);
+
+// Override from parent class.
+void
+SoSFVec3s::initClass(void)
+{
+  SO_SFIELD_INTERNAL_INIT_CLASS(SoSFVec3s);
+}
+
+// No need to document readValue() and writeValue() here, as the
+// necessary information is provided by the documentation of the
+// parent classes.
+#ifndef DOXYGEN_SKIP_THIS
+
+// Read integer value from input stream, return TRUE if
+// successful. Also used from SoMFVec3s class.
+SbBool
+sosfvec3s_read_value(SoInput * in, SbVec3s & v)
+{
+  if (!in->read(v[0]) || !in->read(v[1]) || !in->read(v[2])) {
+    SoReadError::post(in, "Couldn't read vector");
+    return FALSE;
+  }
+  return TRUE;
+}
+
+SbBool
+SoSFVec3s::readValue(SoInput * in)
+{
+  SbVec3s v;
+  if (!sosfvec3s_read_value(in, v)) return FALSE;
+  this->setValue(v);
+  return TRUE;
+}
+
+// Write integer value to output stream. Also used from SoMFVec3s
+// class.
+void
+sosfvec3s_write_value(SoOutput * out, const SbVec3s & v)
+{
+  out->write(v[0]);
+  if (!out->isBinary()) out->write(' ');
+  out->write(v[1]);
+  if (!out->isBinary()) out->write(' ');
+  out->write(v[2]);
+}
+
+void
+SoSFVec3s::writeValue(SoOutput * out) const
+{
+  sosfvec3s_write_value(out, this->getValue());
+}
+
+#endif // DOXYGEN_SKIP_THIS
+
+/*!
+  Set value of vector.
+*/
+void
+SoSFVec3s::setValue(const short x, const short y, const short z)
+{
+  this->setValue(SbVec3s(x, y, z));
+}
+
+/*!
+  Set value of vector.
+*/
+void
+SoSFVec3s::setValue(const short xyz[3])
+{
+  this->setValue(SbVec3s(xyz));
+}
