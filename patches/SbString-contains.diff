Patch by Lars-Ivar Igesund to add substring-searching functionality to
SbString, which is a great idea. (It's surprising that this has never
been part of the SbString API before.)

There are certain actions which should be taken with this before
applying:

        * kill the contains(const char * s) overloaded method, as a
          char* argument will automatically be cast to an SbString
          anyway

        * return an empty list if no matches was found (instead of
          returning a list with a single -1 index)

        * the returned SbIntList from computePrefixFunction() seems to
          never be used..?

        * don't use operator[], but access the internal char-array
          directly, for efficiency reasons

        * change the name of the method ("contains()" sounds like
          something which should return a boolean value) -- Java's
          java.lang.String uses "indexOf()", which sounds good, but we
          need it in plural

        * audit the code to make sure we never overrun the length of
          any of the strings, no matter what kind of input string, or
          how the "this" string looks: wwhat if one or both of them
          are the empty string? what if the input string is longer
          than the "this" string? etc

        * add a "\since 2002-02-XX" to the method documentation

        * write a C version of the new function for cc_string()

..and also, when it is eventually committed:

        * make a diff and stuff it into Coin-1/patchqueue/ for
          inclusion in Coin 1.1.0

        * grep the Coin sourcecode to see if we're doing SbString
          searching anywhere, where we could replace that code with
          just calling this function instead

<mortene@sim.no>
-- 


Index: include/Inventor/SbString.h
===================================================================
RCS file: /export/cvsroot/Coin-1/include/Inventor/SbString.h,v
retrieving revision 1.2
diff -u -r1.2 SbString.h
--- include/Inventor/SbString.h	9 Jan 2002 13:36:24 -0000	1.2
+++ include/Inventor/SbString.h	15 Feb 2002 12:06:56 -0000
@@ -22,6 +22,7 @@
 
 #include <Inventor/system/inttypes.h>
 #include <Inventor/SbBasic.h>
+#include <Inventor/lists/SbIntList.h>
 
 #include <stdio.h>
 #include <stdarg.h>
@@ -44,6 +45,8 @@
   const char * getString(void) const;
   SbString getSubString(int startidx, int endidx = -1) const;
   void deleteSubString(int startidx, int endidx = -1);
+  SbIntList contains(const char * s);
+  SbIntList contains(const SbString & str);
 
   void addIntString(const int value);
 
Index: src/base/SbString.cpp
===================================================================
RCS file: /export/cvsroot/Coin-1/src/base/SbString.cpp,v
retrieving revision 1.8
diff -u -r1.8 SbString.cpp
--- src/base/SbString.cpp	9 Jan 2002 13:36:27 -0000	1.8
+++ src/base/SbString.cpp	15 Feb 2002 12:06:56 -0000
@@ -226,6 +226,89 @@
                 strlen(this->sstring) - endidx);
 }
 
+
+static SbIntList
+computePrefixFunction(const SbString & str)
+{
+  int len = str.getLength();
+  SbIntList pi;
+  pi.append(0);
+  int k = 0;
+  
+  for (int q = 1; q < len; q++){
+    while(k > 0 && (str.operator[](k+1) != str.operator[](q)))
+      k = pi.get(k);
+    if (str.operator[](k+1) == str.operator[](q))
+      k++;
+    pi.append(k);
+  }
+  return pi;
+}
+
+
+/*!
+  Returns a list over all indices where a substring \a s
+  starts. The list is empty if no matches where made.
+
+  \sa SbIntList SbString::contains(const SbString & str)
+*/       
+
+SbIntList
+SbString::contains(const char * s)
+{
+  // The KMP string matching algorithm is used for this method
+  int lenthis = this->getLength();
+  SbString str(s);
+  int lenstr = str.getLength();
+  SbIntList pi = computePrefixFunction(str);
+  SbIntList result;
+  int q = 0;
+
+  for (int i = 0; i < lenthis; i ++){
+    while (q > 0 && (str.operator[](q) != this->operator[](i)))
+      q = 0;
+    if (str.operator[](q) == this->operator[](i))
+      q++;
+    if (q == lenstr){
+      result.append(i - (lenstr - 1));
+       q = 0;
+    }
+  }
+  if (!result.getLength()) result.append(-1);
+  return result;
+}
+
+/*!
+  Returns a list over all indices where a substring \a str
+  starts. The list is empty if no matches where made.
+
+  \sa SbIntList SbString::contains(const char * s)
+*/
+
+SbIntList
+SbString::contains(const SbString & str)
+{
+  // The KMP string matching algorithm is used for this method
+  int lenthis = this->getLength();
+  int lenstr = str.getLength();
+  SbIntList pi = computePrefixFunction(str);
+  SbIntList result;
+  int q = 0;
+
+  for (int i = 0; i < lenthis; i ++){
+    while (q > 0 && (str.operator[](q) != this->operator[](i)))
+      q = 0;
+    if (str.operator[](q) == this->operator[](i))
+      q++;
+    if (q == lenstr){
+      result.append(i - (lenstr - 1));
+       q = 0;
+    }
+  }
+  if (!result.getLength()) result.append(-1);
+  return result;
+}
+
 /*!
   The destructor.
 */
